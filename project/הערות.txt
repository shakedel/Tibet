

Hi,



I shared with you a dropbox folder.




The large rar file contains all the files after some preprocessing (removing hebrew punctuations, special symbols, etc) and translating each hebrew letter to an english letter.




All the original files are there - except RTEXT--7--5--71.txt which I was not able to preprocess. I need to do some additional tests in order to understand what was the problem with this file.




You should run the matching on these files. Regarding the matching code:



In the code folder you could find "match.py" which is a python script. It will use the rest of the files in this directory.

The running arguments for this file are:


parser.add_argument('--inFileA', type=str, required=True)

parser.add_argument('--inFileB', type=str, required=True)

parser.add_argument('--outFile', type=str, required=True)

parser.add_argument('--minDistanceMatch', type=str, required=True)

parser.add_argument('--maxErrorMatch', type=str, required=True)

parser.add_argument('--minDistanceUnion', type=str, required=True)

parser.add_argument('--localAlignPadRatio', type=str, required=True)




Where:

inFileA is the first file in the pair that you want to match

inFileB is the second file in the pair that you want to match

outFile is the final result file. 


minDistanceMatch - The min length of a match (is used by the matching algo) - (was 60 in the tibetian)


maxErrorMatch - The max error distance of a match (is used by the matching algo) - (was 10 in the tibetian)


minDistanceUnion - The min distance between two matches that is required before uniting them (is used by the postprocessing steps) - (was 10 in the tibetian)


localAlignPadRatio - This ratio will be multiplied by the match length, and the resulting number is the number of chars that we'll add to the prefix and suffix of both texts before running local alignment and computing a new match (is used by postprocessing steps) - (was 0.12 in the tibetian)





Running example:

c:\python27\python.exe match.py --inFileA F:\text_project\Data\1\out\RTEXT--1--25--0--38.txt --inFileB F:\text_project\Data\1\out\RTEXT--1--0--22--88.txt --outFile testMatchPyOut.txt --minDistanceMatch 15 --maxErrorMatch 4 --minDistanceUnion 10 --localAlignPadRatio 0.12





Now, in order to take a file and get back the hebrew text you could use the following script: translateTextUsingDict.py

c:\python27\python.exe F:\text_project\Code\translateTextUsingDict.py --inFile F:\text_project\Data\12\out\RTEXT--12--0--1--0--4.txt --inDict F:\text_project\unicodeCharToReplaceDict.bin --outFile translate3.txt





The file unicodeCharToReplaceDict.bin is in the shared folder.




You should probably download python and numpy library in order to run the scripts.




And maybe you would need to wait for ~1-2 hours until the big rar file will be uploaded from my computer to dropbox and only then you will be able to start downloading it.

Hope that this will help you.




Ben